<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == '' AND $(WebApplicationProjectTypeGuid) != '' AND $(ProjectTypeGuids) != ''">$(ProjectTypeGuids.Contains($(WebApplicationProjectTypeGuid)))</IsWebApplicationProject>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == ''">False</IsWebApplicationProject>
	</PropertyGroup>








	<PropertyGroup>
		<DiscoverXmlFilesDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
		</DiscoverXmlFilesDependsOn>
	</PropertyGroup>
	<Target Name="DiscoverXmlFiles" DependsOnTargets="$(DiscoverXmlFilesDependsOn)">
		<ItemGroup Condition="@(XmlFile) == ''">
			<XmlFile Include="@(None);@(Content);@(Resource);@(EmbeddedResource)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))" />
		</ItemGroup>
	</Target>
	<PropertyGroup>
		<ListXmlFilesDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
		</ListXmlFilesDependsOn>
	</PropertyGroup>
	<Target Name="ListXmlFiles" DependsOnTargets="$(ListXmlFilesDependsOn)">

		<Message
			Importance="$(MessageImportance)"
			Text="ProfileTransformWebConfigIntermediateOutput = $(ProfileTransformWebConfigIntermediateOutput)"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text="TransformWebConfigIntermediateOutput = $(TransformWebConfigIntermediateOutput)"
		/>
		

		<Message
			Importance="$(MessageImportance)"
			Text="XmlFileExtensionRegularExpressionPattern = $(XmlFileExtensionRegularExpressionPattern)"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text="XmlFile = %(XmlFile.Identity)"
		/>
	</Target>
	<PropertyGroup>
		<BuildDependsOnXX>
			<!--
			DiscoverXmlFiles;
			ListXmlFiles;
			-->
		</BuildDependsOnXX>
	</PropertyGroup>
	<Target
		Name="Buildxxx"
		DependsOnTargets="$(BuildDependsOnXX)"
	>
		<ItemGroup>
			<Test Remove="@(Test)" />
		</ItemGroup>
		<ItemGroup>
			<Test Include="Hej" />
			<Test Include="adf" />
			<Test Include="dd" />
			<Test Include="Hej" />
		</ItemGroup>
		<Message
			Importance="high"
			Text="Test = @(Test)"
		/>
		<Message
			Importance="high"
			Text="Clear the list"
		/>
		<ItemGroup>
			<Test Remove="@(Test)" />
		</ItemGroup>
		<Message
			Importance="high"
			Text="Test = @(Test)"
		/>
	</Target>







	<PropertyGroup>
		<PreProfileTransformWebConfigDependsOn>
			$(PreProfileTransformWebConfigDependsOn);
			ShowProfileTransformInformation;
		</PreProfileTransformWebConfigDependsOn>
		<PreTransformWebConfigDependsOn>
			$(PreTransformWebConfigDependsOn);
			ShowTransformInformation;
		</PreTransformWebConfigDependsOn>
	</PropertyGroup>
	<Target Name="ShowTransformInformation">
		<Message
			Importance="$(MessageImportance)"
			Text="WebConfigsToTransform%0a======================================================"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text=" - %(WebConfigsToTransform.Identity)%0a   - CommonBuildTransform = '%(WebConfigsToTransform.CommonBuildTransform)'%0a   - CommonPublishTransform = '%(WebConfigsToTransform.CommonPublishTransform)'%0a   - DestinationRelativePath = '%(WebConfigsToTransform.DestinationRelativePath)'%0a   - OriginalIdentity = '%(WebConfigsToTransform.OriginalIdentity)'%0a   - PreTransformFile = '%(WebConfigsToTransform.PreTransformFile)'%0a   - Source = '%(WebConfigsToTransform.Source)'%0a   - TransformFile = '%(WebConfigsToTransform.TransformFile)'%0a   - TransformFileFolder = '%(WebConfigsToTransform.TransformFileFolder)'%0a   - TransformOriginalFolder = '%(WebConfigsToTransform.TransformOriginalFolder)'%0a   - TransformOutputFile = '%(WebConfigsToTransform.TransformOutputFile)'%0a   - TransformScope = '%(WebConfigsToTransform.TransformScope)'"
		/>
	</Target>
	<Target Name="ShowProfileTransformInformation">
		<Message
			Importance="$(MessageImportance)"
			Text="ProfileWebConfigsToTransform%0a======================================================"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text=" - %(ProfileWebConfigsToTransform.Identity)%0a   - CommonBuildTransform = '%(ProfileWebConfigsToTransform.CommonBuildTransform)'%0a   - CommonPublishTransform = '%(ProfileWebConfigsToTransform.CommonPublishTransform)'%0a   - DestinationRelativePath = '%(ProfileWebConfigsToTransform.DestinationRelativePath)'%0a   - OriginalIdentity = '%(ProfileWebConfigsToTransform.OriginalIdentity)'%0a   - PreTransformFile = '%(ProfileWebConfigsToTransform.PreTransformFile)'%0a   - Source = '%(ProfileWebConfigsToTransform.Source)'%0a   - TransformFile = '%(ProfileWebConfigsToTransform.TransformFile)'%0a   - TransformFileFolder = '%(ProfileWebConfigsToTransform.TransformFileFolder)'%0a   - TransformOriginalFolder = '%(ProfileWebConfigsToTransform.TransformOriginalFolder)'%0a   - TransformOutputFile = '%(ProfileWebConfigsToTransform.TransformOutputFile)'%0a   - TransformScope = '%(ProfileWebConfigsToTransform.TransformScope)'"
		/>
	</Target>













	<PropertyGroup>
		<CollectXmlFilesToTransformOnPublishBuildDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
		</CollectXmlFilesToTransformOnPublishBuildDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlFilesToTransformOnPublishBuild" DependsOnTargets="$(CollectXmlFilesToTransformOnPublishBuild)">
		<ItemGroup>
			<_XmlFileToTransformOnPublishBuild Include="@(FilesForPackagingFromProject)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))">
				<XmlFile>%(Identity)</XmlFile>
				<PreTransformFile>@(XmlTransformationMap->'%(CommonBuildTransform)')</PreTransformFile>
				<TransformFile></TransformFile>
				<TransformSource>@(XmlTransformationMap->'%(Source)')</TransformSource>
			</_XmlFileToTransformOnPublishBuild>
			<_XmlFileToTransformOnPublish>
				<TransformOutputFile>$(TransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="Exists('%(RelativeDir)%(Filename).$(Configuration)%(Extension)')">
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
			</_XmlFileToTransformOnPublish>
		</ItemGroup>
		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<ItemGroup>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And !Exists('%(PreTransformFile)')">
				<PreTransformFile></PreTransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(Source) != '' And !Exists('%(Source)')">
				<Source></Source>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And %(TransformFile) == ''">
				<PreTransformFile></PreTransformFile>
				<TransformFile>%(PreTransformFile)</TransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Remove="%(Identity)" Condition="%(TransformFile) == ''" />
		</ItemGroup>










		<Copy
	Condition="%(WebConfigsToTransform.PreTransformFile) != '' And %(WebConfigsToTransform.Identity) == %(WebConfigsToTransform.TransformOutputFile) And !Exists('%(WebConfigsToTransform.Identity)') And %(WebConfigsToTransform.Source) != ''"
	DestinationFiles="%(WebConfigsToTransform.Identity)"
	SourceFiles="%(WebConfigsToTransform.Source)"
		/>
		<Copy
			Condition="%(WebConfigsToTransform.PreTransformFile) != '' And %(WebConfigsToTransform.Identity) == %(WebConfigsToTransform.TransformOutputFile) And !Exists('%(WebConfigsToTransform.Identity)') And %(WebConfigsToTransform.Source) == ''"
			DestinationFiles="%(WebConfigsToTransform.Identity)"
			SourceFiles="%(WebConfigsToTransform.OriginalIdentity)"
		/>
	</Target>







	<!--
	<PropertyGroup>
		<CollectFilesForProfileTransformWebConfigsDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
			$(CollectFilesForProfileTransformWebConfigsDependsOn);
		</CollectFilesForProfileTransformWebConfigsDependsOn>
	</PropertyGroup>
	<Target Name="CollectFilesForProfileTransformWebConfigs" DependsOnTargets="$(CollectFilesForProfileTransformWebConfigsDependsOn)" Condition="'$(CollectFilesForProfileTransformWebConfigs)' != 'false'">
		<ItemGroup>-->






	<PropertyGroup>
		<CollectFilesForProfileTransformWebConfigsDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
			$(CollectFilesForProfileTransformWebConfigsDependsOn);
		</CollectFilesForProfileTransformWebConfigsDependsOn>
	</PropertyGroup>
	<Target Name="CollectFilesForProfileTransformWebConfigs" DependsOnTargets="$(CollectFilesForProfileTransformWebConfigsDependsOn)" Condition="'$(CollectFilesForProfileTransformWebConfigs)' != 'false'">
		<ItemGroup>
			<_ProfileXmlFileToTransformOnPublish Include="@(FilesForPackagingFromProject)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))">
				<!--<OriginalIdentity>%(Identity)</OriginalIdentity>-->
				<PreTransformFile>@(XmlTransformationMap->'%(CommonPublishTransform)')</PreTransformFile>
				<Source>@(XmlTransformationMap->'%(Source)')</Source>
				<TransformFile></TransformFile>
				<TransformFileFolder>$(ProfileTransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
				<TransformOriginalFolder>$(ProfileTransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
			</_ProfileXmlFileToTransformOnPublish>
			<_ProfileXmlFileToTransformOnPublish>
				<TransformOutputFile>$(ProfileTransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			</_ProfileXmlFileToTransformOnPublish>
			<_ProfileXmlFileToTransformOnPublish Condition="Exists('%(RelativeDir)%(Filename).$(Configuration)%(Extension)')">
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
			</_ProfileXmlFileToTransformOnPublish>
		</ItemGroup>
		
		
		
		<!--

		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<ItemGroup>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And !Exists('%(PreTransformFile)')">
				<PreTransformFile></PreTransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(Source) != '' And !Exists('%(Source)')">
				<Source></Source>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And %(TransformFile) == ''">
				<PreTransformFile></PreTransformFile>
				<TransformFile>%(PreTransformFile)</TransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Remove="%(Identity)" Condition="%(TransformFile) == ''" />
		</ItemGroup>
		<ItemGroup>
			<WebConfigsToTransform Include="@(_XmlFileToTransformOnPublish->'%(Source)')" Condition="%(Source) != ''" />
			<_XmlFileToTransformOnPublish Remove="@(WebConfigsToTransform->'%(OriginalIdentity)')" />
			<WebConfigsToTransform Include="@(_XmlFileToTransformOnPublish)" />
			<_XmlFileToTransformOnPublish Remove="@(WebConfigsToTransform)" />
			<_WebConfigsToTransformOuputs Include="@(WebConfigsToTransform->'%(TransformOutputFile)')" />
		</ItemGroup>
		-->




		
				
		
		
		
		
		
		
		
		
		<ItemGroup>
			<ProfileWebConfigsToTransform Include="@(_ProfileXmlFileToTransformOnPublish)" />
			
			<_ProfileWebConfigsToTransformOuputs Include="@(ProfileWebConfigsToTransform->'%(TransformOutputFile)')" />
		</ItemGroup>
		<CallTarget Targets="$(OnAfterCollectFilesForProfileTransformWebConfigs)" RunEachTargetSeparately="False" />
	</Target>
	<PropertyGroup>
		<CollectWebConfigsToTransformDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
			$(CollectWebConfigsToTransformDependsOn);
		</CollectWebConfigsToTransformDependsOn>
	</PropertyGroup>
	<Target Name="CollectWebConfigsToTransform" DependsOnTargets="$(CollectWebConfigsToTransformDependsOn)" Condition="'$(CollectWebConfigsToTransform)' != 'false'">
		<ItemGroup>
			<_XmlFileToTransformOnPublish Include="@(FilesForPackagingFromProject)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))">
				<OriginalIdentity>%(Identity)</OriginalIdentity>
				<PreTransformFile>@(XmlTransformationMap->'%(CommonBuildTransform)')</PreTransformFile>
				<Source>@(XmlTransformationMap->'%(Source)')</Source>
				<TransformFile></TransformFile>
				<TransformFileFolder>$(TransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
				<TransformOriginalFolder>$(TransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish>
				<TransformOutputFile>$(TransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="Exists('%(RelativeDir)%(Filename).$(Configuration)%(Extension)')">
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
			</_XmlFileToTransformOnPublish>
		</ItemGroup>
		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.PreTransformFile) != '' And !Exists('%(_XmlFileToTransformOnPublish.PreTransformFile)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(_XmlFileToTransformOnPublish.PreTransformFile))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Error
			Condition="$(XmlTransformationValidationSetting) == 'Error' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationSetting) == 'Message' And %(_XmlFileToTransformOnPublish.Source) != '' And !Exists('%(_XmlFileToTransformOnPublish.Source)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(_XmlFileToTransformOnPublish.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(_XmlFileToTransformOnPublish.Identity)))"
		/>
		<ItemGroup>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And !Exists('%(PreTransformFile)')">
				<PreTransformFile></PreTransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(Source) != '' And !Exists('%(Source)')">
				<Source></Source>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Condition="%(PreTransformFile) != '' And %(TransformFile) == ''">
				<PreTransformFile></PreTransformFile>
				<TransformFile>%(PreTransformFile)</TransformFile>
			</_XmlFileToTransformOnPublish>
			<_XmlFileToTransformOnPublish Remove="%(Identity)" Condition="%(TransformFile) == ''" />
		</ItemGroup>
		<ItemGroup>




			<TransformFileFolder>$(TransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
			<TransformOriginalFolder>$(TransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
			</XmlFileToTransformOnPublishBuild>
			<_XmlFileToTransformOnPublish>
				<TransformOutputFile>$(TransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			
			
			
			
			
			<WebConfigsToTransform Include="@(_XmlFileToTransformOnPublish->'%(TransformOutputFile)')" Condition="%(PreTransformFile) != ''" />
			<_XmlFileToTransformOnPublish Remove="@(WebConfigsToTransform->'%(OriginalIdentity)')" />
			<WebConfigsToTransform Include="@(_XmlFileToTransformOnPublish->'%(Source)')" Condition="%(Source) != ''" />
			<_XmlFileToTransformOnPublish Remove="@(WebConfigsToTransform->'%(OriginalIdentity)')" />
			<WebConfigsToTransform Include="@(_XmlFileToTransformOnPublish)" />
			<_XmlFileToTransformOnPublish Remove="@(WebConfigsToTransform)" />
			<_WebConfigsToTransformOuputs Include="@(WebConfigsToTransform->'%(TransformOutputFile)')" />
		</ItemGroup>
		<Copy
			Condition="%(WebConfigsToTransform.PreTransformFile) != '' And %(WebConfigsToTransform.Identity) == %(WebConfigsToTransform.TransformOutputFile) And !Exists('%(WebConfigsToTransform.Identity)') And %(WebConfigsToTransform.Source) != ''"
			DestinationFiles="%(WebConfigsToTransform.Identity)"
			SourceFiles="%(WebConfigsToTransform.Source)"
		/>
		<Copy
			Condition="%(WebConfigsToTransform.PreTransformFile) != '' And %(WebConfigsToTransform.Identity) == %(WebConfigsToTransform.TransformOutputFile) And !Exists('%(WebConfigsToTransform.Identity)') And %(WebConfigsToTransform.Source) == ''"
			DestinationFiles="%(WebConfigsToTransform.Identity)"
			SourceFiles="%(WebConfigsToTransform.OriginalIdentity)"
		/>
		<CallTarget Targets="$(OnAfterCollectWebConfigsToTransform)" RunEachTargetSeparately="False" />
	</Target>
	<Target Name="SetXmlFileExtensionRegularExpressionPattern">
		<PropertyGroup>
			<_XmlFileExtensions Condition="$(_XmlFileExtensions) == ''">@(XmlFileExtension)</_XmlFileExtensions>
			<!-- ?i: = case-insensitive -->
			<XmlFileExtensionRegularExpressionPattern Condition="$(XmlFileExtensionRegularExpressionPattern) == ''">(?i:^\.($(_XmlFileExtensions.Replace(".", "").Replace(";", "|")))$)</XmlFileExtensionRegularExpressionPattern>
		</PropertyGroup>
	</Target>
	<Target
		Name="TransformWebConfigCore"
		Condition="@(WebConfigsToTransform)!='' And $(TransformWebConfigEnabled) And !$(UseParameterizeToTransformWebConfig)"
		DependsOnTargets="$(TransformWebConfigCoreDependsOn)"
		Inputs="@(WebConfigsToTransform);%(TransformFile)"
		Outputs="$(_WebConfigTransformOutput)"
	>
		<TransformXml
			Condition="!%(Exclude) And %(PreTransform)"
			Destination="%(PreTransformOutputFile)"
			Source="@(_WebConfigsToTransform->'%(PreTransformSource)')"
			SourceRootPath="$(WebPublishPipelineSourceRootDirectory)"
			StackTrace="$(TransformWebConfigStackTraceEnabled)"
			Transform="%(PreTransformFile)"
			TransformRootPath="$(WebPublishPipelineTransformRootDirectory)"
		/>
		<Message
			Condition="!%(Exclude) And %(PreTransform)"
			Importance="$(MessageImportance)"
			Text="Pre-transformed @(_WebConfigsToTransform->'%(PreTransformSource)') using %(PreTransformFile) into %(TransformOutputFile)."
		/>
		<TransformXml
			Condition="!%(Exclude) And %(Transform)"
			Destination="%(TransformOutputFile)"
			Source="@(_WebConfigsToTransform)"
			SourceRootPath="$(WebPublishPipelineSourceRootDirectory)"
			StackTrace="$(TransformWebConfigStackTraceEnabled)"
			Transform="%(TransformFile)"
			TransformRootPath="$(WebPublishPipelineTransformRootDirectory)"
		/>
	</Target>
</Project>