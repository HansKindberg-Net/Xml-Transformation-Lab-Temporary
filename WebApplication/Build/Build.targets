<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == '' AND $(WebApplicationProjectTypeGuid) != '' AND $(ProjectTypeGuids) != ''">$(ProjectTypeGuids.Contains($(WebApplicationProjectTypeGuid)))</IsWebApplicationProject>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == ''">False</IsWebApplicationProject>
	</PropertyGroup>


	<!--
	<Target Name="Build">
		<ItemGroup>
			<Test Include="Test">
				<Value>Test</Value>
			</Test>
		</ItemGroup>
		<Message
			Importance="high"
			Text="Test = %(Test.Identity), Value = %(Test.Value)"
		/>
		<ItemGroup>
			<Else Include="%(Test.Identity)">

			</Else>
		</ItemGroup>
		<Message
			Importance="high"
			Text="Else = %(Else.Identity), Value = %(Else.Value)"
		/>
	</Target>
	-->









	<PropertyGroup>
		<PreProfileTransformWebConfigDependsOn>
			$(PreProfileTransformWebConfigDependsOn);
			ShowXmlFilesToTransformOnPublishProfile;
		</PreProfileTransformWebConfigDependsOn>
		<PreTransformWebConfigDependsOn>
			$(PreTransformWebConfigDependsOn);
			ShowXmlFilesToTransformOnPublishBuild;
		</PreTransformWebConfigDependsOn>
	</PropertyGroup>
	<Target Name="ShowXmlFilesToTransformOnPublishBuild">
		<Message
			Importance="$(MessageImportance)"
			Text="XmlTransformationMapOnPublishBuild%0a======================================================"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text=" - %(XmlTransformationMapOnPublishBuild.Identity)%0a   - CommonBuildTransform = '%(XmlTransformationMapOnPublishBuild.CommonBuildTransform)'%0a   - Source = '%(XmlTransformationMapOnPublishBuild.Source)'%0a   - TransformFile = '%(XmlTransformationMapOnPublishBuild.TransformFile)'"
		/>

		<ItemGroup>
			<!-- Clear -->
			<_XmlFileToShow Remove="@(_XmlFileToShow)" />
			<_XmlFileToShow Include="@(WebConfigsToTransform)" />
		</ItemGroup>
		<Message
			Importance="$(MessageImportance)"
			Text="WebConfigsToTransform%0a======================================================"
		/>
		<Message
			Importance="$(MessageImportance)"
			Text=" - %(_XmlFileToShow.Identity)%0a   - PreTransform = '%(_XmlFileToShow.PreTransform)'%0a   - PreTransformFile = '%(_XmlFileToShow.PreTransformFile)'%0a   - PreTransformOutputFile = '%(_XmlFileToShow.PreTransformOutputFile)'%0a   - PreTransformSource = '%(_XmlFileToShow.PreTransformSource)'%0a   - Transform = '%(_XmlFileToShow.Transform)'%0a   - TransformFile = '%(_XmlFileToShow.TransformFile)'%0a   - TransformOutputFile = '%(_XmlFileToShow.TransformOutputFile)'%0a   - TransformSource = '%(_XmlFileToShow.TransformSource)'%0a   - XmlFile = '%(_XmlFileToShow.XmlFile)'"
		/>
	</Target>
	<Target Name="ShowXmlFilesToTransformOnPublishProfile">
		<ItemGroup>
			<!-- Clear -->
			<_XmlFileToShow Remove="@(_XmlFileToShow)" />
			<_XmlFileToShow Include="@(ProfileWebConfigsToTransform)" />
		</ItemGroup>
	</Target>







	<PropertyGroup>
		<CollectXmlTransformationMapOnPublishBuildDependsOn>
			SetXmlFileExtensionRegularExpressionPattern;
		</CollectXmlTransformationMapOnPublishBuildDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlTransformationMapOnPublishBuild" DependsOnTargets="$(CollectXmlTransformationMapOnPublishBuildDependsOn)">
		<ItemGroup>
			<XmlTransformationMapOnPublishBuild Include="@(FilesForPackagingFromProject)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))">
				<CommonBuildTransform>@(XmlTransformationMap->'%(CommonBuildTransform)')</CommonBuildTransform>
				<Source>@(XmlTransformationMap->'%(Source)')</Source>
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
			</XmlTransformationMapOnPublishBuild>
		</ItemGroup>
		<Error
			Condition="$(XmlTransformationValidationMode) == 'Error' And %(XmlTransformationMapOnPublishBuild.CommonBuildTransform) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.CommonBuildTransform)')"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(XmlTransformationMapOnPublishBuild.CommonBuildTransform))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(XmlTransformationMapOnPublishBuild.Identity)))"
		/>
		<Warning
			Condition="$(XmlTransformationValidationMode) == 'Warning' And %(XmlTransformationMapOnPublishBuild.CommonBuildTransform) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.CommonBuildTransform)')"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(XmlTransformationMapOnPublishBuild.CommonBuildTransform))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(XmlTransformationMapOnPublishBuild.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationMode) == 'Message' And %(XmlTransformationMapOnPublishBuild.CommonBuildTransform) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.CommonBuildTransform)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationCommonBuildTransformErrorMessage)', %(XmlTransformationMapOnPublishBuild.CommonBuildTransform))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'CommonBuildTransform', %(XmlTransformationMapOnPublishBuild.Identity)))"
		/>
		<Error
			Condition="$(XmlTransformationValidationMode) == 'Error' And %(XmlTransformationMapOnPublishBuild.Source) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.Source)')"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(XmlTransformationMapOnPublishBuild.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(XmlTransformationMapOnPublishBuild.Identity)))"
		/>
		<Warning
			Condition="$(XmlTransformationValidationMode) == 'Warning' And %(XmlTransformationMapOnPublishBuild.Source) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.Source)')"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(XmlTransformationMapOnPublishBuild.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(XmlTransformationMapOnPublishBuild.Identity)))"
		/>
		<Message
			Condition="$(XmlTransformationValidationMode) == 'Message' And %(XmlTransformationMapOnPublishBuild.Source) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.Source)')"
			Importance="$(MessageImportance)"
			Text="$([System.String]::Format('$(XmlTransformationSourceErrorMessage)', %(XmlFileToTransformOnPublishBuild.Source))) $([System.String]::Format('$(XmlTransformationMapReferenceMessage)', 'Source', %(XmlFileToTransformOnPublishBuild.Identity)))"
		/>
		<ItemGroup>
			<XmlTransformationMapOnPublishBuild Condition="%(XmlTransformationMapOnPublishBuild.CommonBuildTransform) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.CommonBuildTransform)')">
				<CommonBuildTransform></CommonBuildTransform>
			</XmlTransformationMapOnPublishBuild>
			<XmlTransformationMapOnPublishBuild Condition="%(XmlTransformationMapOnPublishBuild.Source) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.Source)')">
				<Source></Source>
			</XmlTransformationMapOnPublishBuild>
			<XmlTransformationMapOnPublishBuild Condition="%(XmlTransformationMapOnPublishBuild.TransformFile) != '' And !Exists('%(XmlTransformationMapOnPublishBuild.TransformFile)')">
				<TransformFile></TransformFile>
			</XmlTransformationMapOnPublishBuild>
			<XmlTransformationMapOnPublishBuild Remove="@(XmlTransformationMapOnPublishBuild)" Condition="%(CommonBuildTransform) == '' And %(Source) == '' And %(TransformFile) == ''" />
		</ItemGroup>
	</Target>





	<PropertyGroup>
		<CollectXmlFilesToTransformOnPublishBuildDependsOn>
			CollectXmlTransformationMapOnPublishBuild;
		</CollectXmlFilesToTransformOnPublishBuildDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlFilesToTransformOnPublishBuild" DependsOnTargets="$(CollectXmlFilesToTransformOnPublishBuildDependsOn)">



















		<ItemGroup>
			<XmlFileToTransformOnPublishBuild Include="@(XmlTransformationMapOnPublishBuild)">
				<PreTransform>True</PreTransform>
				<PreTransformFile>@(XmlTransformationMap->'%(CommonBuildTransform)')</PreTransformFile>
				<PreTransformSource>@(XmlTransformationMap->'%(Source)')</PreTransformSource>
				<Transform>True</Transform>
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
				<XmlFile>%(Identity)</XmlFile>
			</XmlFileToTransformOnPublishBuild>
		</ItemGroup>
		<ItemGroup>
			<!--
			<XmlFileToTransformOnPublishBuild Include="@(FilesForPackagingFromProject)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Extension)', '$(XmlFileExtensionRegularExpressionPattern)'))">
				<PreTransform>True</PreTransform>
				<PreTransformFile>@(XmlTransformationMap->'%(CommonBuildTransform)')</PreTransformFile>
				<PreTransformSource>@(XmlTransformationMap->'%(Source)')</PreTransformSource>
				<Transform>True</Transform>
				<TransformFile>%(RelativeDir)%(Filename).$(Configuration)%(Extension)</TransformFile>
				<XmlFile>%(Identity)</XmlFile>
			</XmlFileToTransformOnPublishBuild>
			-->
			<XmlFileToTransformOnPublishBuild Condition="%(PreTransformFile) != '' And !Exists('%(PreTransformFile)')">
				<PreTransformFile></PreTransformFile>
			</XmlFileToTransformOnPublishBuild>
			<XmlFileToTransformOnPublishBuild Condition="%(PreTransformFile) == ''">
				<PreTransform>False</PreTransform>
			</XmlFileToTransformOnPublishBuild>
			<XmlFileToTransformOnPublishBuild Condition="%(PreTransformSource) != '' And !Exists('%(PreTransformSource)')">
				<PreTransformSource></PreTransformSource>
			</XmlFileToTransformOnPublishBuild>

			<XmlFileToTransformOnPublishBuild Condition="%(TransformFile) != '' And !Exists('%(TransformFile)')">
				<TransformFile></TransformFile>
			</XmlFileToTransformOnPublishBuild>
			<XmlFileToTransformOnPublishBuild Condition="%(TransformFile) == ''">
				<Transform>False</Transform>
			</XmlFileToTransformOnPublishBuild>

			<XmlFileToTransformOnPublishBuild Condition="!%(PreTransform) And !%(Transform)">
				<PreTransformSource></PreTransformSource>
			</XmlFileToTransformOnPublishBuild>

			<XmlFileToTransformOnPublishBuild Condition="!%(PreTransform) And %(Transform)">
				<PreTransformSource></PreTransformSource>
				<TransformSource>%(PreTransformSource)</TransformSource>
			</XmlFileToTransformOnPublishBuild>














			<!--
			<XmlFileToTransformOnPublishBuild>

				
				
				<PreTransformOutputFile></PreTransformOutputFile>
				<Transform>False</Transform>
				<TransformOutputFile></TransformOutputFile>
				<TransformSource></TransformSource>
			</XmlFileToTransformOnPublishBuild>
			-->
		</ItemGroup>

	</Target>
	
	
	
	<PropertyGroup>
		<CollectWebConfigsToTransformDependsOn>
			CollectXmlFilesToTransformOnPublishBuild;
			$(CollectWebConfigsToTransformDependsOn);
		</CollectWebConfigsToTransformDependsOn>
	</PropertyGroup>
	<Target Name="CollectWebConfigsToTransform" DependsOnTargets="$(CollectWebConfigsToTransformDependsOn)" Condition="'$(CollectWebConfigsToTransform)' != 'false'">
		<ItemGroup>
			<WebConfigsToTransform Include="@(XmlFileToTransformOnPublishBuild)" />
		</ItemGroup>
	</Target>
	
	
	
	
	
	
	
	
	
	
	
	<Target Name="SetXmlFileExtensionRegularExpressionPattern">
		<PropertyGroup>
			<_XmlFileExtensions Condition="$(_XmlFileExtensions) == ''">@(XmlFileExtension)</_XmlFileExtensions>
			<!-- ?i: = case-insensitive -->
			<XmlFileExtensionRegularExpressionPattern Condition="$(XmlFileExtensionRegularExpressionPattern) == ''">(?i:^\.($(_XmlFileExtensions.Replace(".", "").Replace(";", "|")))$)</XmlFileExtensionRegularExpressionPattern>
		</PropertyGroup>
	</Target>
</Project>